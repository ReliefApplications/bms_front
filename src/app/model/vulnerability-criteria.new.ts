import { TextModelField } from './CustomModel/text-model-field';
import { NumberModelField } from './CustomModel/number-model-field';
import { CustomModel } from './CustomModel/custom-model';

export class VulnerabilityCriteria extends CustomModel {
    matSortActive = 'name';

    public fields = {
        id: new NumberModelField(
            {
                // Not displayed anywhere
            }
        ),
        name: new TextModelField(
            {

            }
        ),
        displayed: new TextModelField(
            {

            }
        )
    };

    public static apiToModel(vulnerabilityFromApi): VulnerabilityCriteria {
        const newVulnerability = new VulnerabilityCriteria();
        newVulnerability.set('id', vulnerabilityFromApi.id);
        newVulnerability.set('name', vulnerabilityFromApi.field_string);
        newVulnerability.set('displayed', newVulnerability.getTooltip());
        return newVulnerability;
    }

    public modelToApi(): Object {
        return {
            id: this.get('id'),
            field_string: this.get('name')
        };
    }

    public getImage(): string {
        const vulnerabilityImages: object = {
            'pregnant': 'pregnant',
            'disabled': 'disabled',
            'lactating': 'lactating',
            'solo parent': 'solo-parent',
            'nutritional issues': 'nutritional-issues',
        };
        if (typeof this.get('name') === 'string') {
            return `/assets/images/households/${vulnerabilityImages[this.get<string>('name')]}.png`;
        } else {
            return '';
        }
    }

    public getTooltip(): string {
        const vulnerabilityTooltips: object = {
            'pregnant': this.language.vulnerability_pregnant,
            'disabled': this.language.vulnerability_disabled,
            'lactating': this.language.vulnerability_lactating,
            'solo parent': this.language.vulnerability_solo_parent,
            'nutritional issues': this.language.vulnerability_nutrional,
        };
        if (typeof this.get('name') === 'string') {
            return vulnerabilityTooltips[this.get<string>('name')];
        } else {
            return '';
        }
    }
}
